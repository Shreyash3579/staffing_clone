using BackgroundPolling.API.Contracts.Helpers;
using BackgroundPolling.API.Contracts.Repository;
using BackgroundPolling.API.Contracts.Services;
using BackgroundPolling.API.Core.Helpers;
using BackgroundPolling.API.Core.Repository;
using BackgroundPolling.API.Core.Services;
using BackgroundPolling.API.Models;
using Hangfire;
using Hangfire.SqlServer;
using Microservices.Common;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;

namespace BackgroundPolling.API.Extensions
{
    public static class ServiceExtensions
    {
        public static IServiceCollection RegisterAppServices(this IServiceCollection services)
        {
            #region CORS

            services.AddCors(o => o.AddPolicy("CorsPolicy", builder =>
            {
                builder.AllowAnyOrigin()
                    .AllowAnyMethod()
                    .AllowAnyHeader()
                    .SetPreflightMaxAge(TimeSpan.FromSeconds(7200));
            }));

            #endregion

            #region JWT Authentication

            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(options =>
                {
                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateLifetime = true,
                        ValidateIssuerSigningKey = true,
                        ValidateAudience = true,
                        ValidateIssuer = true,

                        ValidIssuer = "Staffing Authentication API",
                        ValidAudience = "APIs accessed by Staffing App",
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8
                            .GetBytes(Environment.GetEnvironmentVariable("staffing_secretKey")))
                    };
                });

            #endregion

            #region Swagger

            services.AddSwaggerGen(options =>
            {
                // The generated Swagger JSON file will have these properties.
                options.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "Background Polling API",
                    Version = "v1",
                    Description = "Poll external system recursively"
                });

                options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    In = ParameterLocation.Header,
                    Description = "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
                    Name = "Authorization",
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer"
                });

                options.AddSecurityRequirement(new OpenApiSecurityRequirement()
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            },
                            Scheme = "oauth2",
                            Name = "Bearer",
                            In = ParameterLocation.Header,
                        },
                        new List<string>()
                     }
                  });

                //Locate the XML file being generated by ASP.NET
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //Tell swagger to use XML comments
                options.IncludeXmlComments(xmlPath);
            });

            #endregion

            #region Hangfire

            var connectionString = ConfigurationUtility.GetValue("ConnectionStrings:HangfireDatabase").Decrypt();

            var sqlServerStorageOptions = new SqlServerStorageOptions
            {
                PrepareSchemaIfNecessary = false
            };
            services.AddHangfire(x => x.UseSqlServerStorage(connectionString, sqlServerStorageOptions).UseFilter(new LogFailureAttribute()));
            services.AddHangfireServer();
            #endregion

            #region services

            services.AddScoped<INotificationService, NotificationService>();
            services.AddScoped<IWorkdayPollingService, WorkdayPollingService>();
            services.AddScoped<IFinanceDataPollingService, FinanceDataPollingService>();
            services.AddScoped<ICCMPollingService, CCMPollingService>();
            services.AddScoped<IVacationPollingService, VacationPollingService>();
            services.AddScoped<ITrainingPollingService, TrainingPollingService>();
            services.AddScoped<IHolidayPollingService, HolidayPollingService>();
            services.AddScoped<IPolarisPollingService, PolarisPollingService>();
            services.AddScoped<IStaffingPollingService, StaffingPollingService>();
            services.AddScoped<IADSecurityUserService, ADSecurityUserService>();
            services.AddScoped<IBasisPollingService, BasisPollingService>();
            services.AddScoped<IEmailUtilityService, EmailUtilityService>();
            services.AddScoped<IPipelinePollingService, PipelinePollingService>();
            services.AddScoped<ISharepointPollingService, SharepointPollingService>();
            services.AddScoped<IAnalyticsAuditService, AnalyticsAuditService>();
            services.AddScoped<IAzureSearchPollingService, AzureSearchPollingService>();
            services.AddScoped<IIrisPollingService, IrisPollingService>();

            #endregion

            #region Base Repository

            services.AddScoped<IDapperContext, DapperContext>();
            services.AddScoped(provider =>
            {
                return new Func<string, IDapperContext>(connectionString =>
                    new DapperContext(connectionString));
            });
            services.AddScoped<IBaseRepository<Notification>, BaseRepository<Notification>>();
            services.AddScoped<IBaseRepository<ResourceTransition>, BaseRepository<ResourceTransition>>();
            services.AddScoped<IBaseRepository<Office>, BaseRepository<Office>>();
            services.AddScoped<IBaseRepository<string>, BaseRepository<string>>();
            services.AddScoped<IBaseRepository<Vacation>, BaseRepository<Vacation>>();
            services.AddScoped<IBaseRepository<Training>, BaseRepository<Training>>();
            services.AddScoped<IBaseRepository<Holiday>, BaseRepository<Holiday>>();
            services.AddScoped<IBaseRepository<PolarisSecurityUser>, BaseRepository<PolarisSecurityUser>>();
            services.AddScoped<IBaseRepository<SecurityUser>, BaseRepository<SecurityUser>>();
            services.AddScoped<IBaseRepository<AuditLog>, BaseRepository<AuditLog>>();

            #endregion

            #region Repository

            services.AddScoped<INotificationRepository, NotificationRepository>();
            services.AddScoped<IWorkdayPollingRepository, WorkdayPollingRepository>();
            services.AddScoped<IFinanceDataPollingRepository, FinanceDataPollingRepository>();
            services.AddScoped<IPollMasterRepository, PollMasterRepository>();
            services.AddScoped<IVacationPollingRepository, VacationPollingRepository>();
            services.AddScoped<ITrainingPollingRepository, TrainingPollingRepository>();
            services.AddScoped<IHolidayPollingRepository, HolidayPollingRepository>();
            services.AddScoped<ICCMPollingRepository, CCMPollingRepository>();
            services.AddScoped<IPolarisPollingRepository, PolarisPollingRepository>();
            services.AddScoped<IStaffingPollingRepository, StaffingPollingRepository>();
            services.AddScoped<IBasisPollingRepository, BasisPollingRepository>();
            services.AddScoped<IStaffingAnalyticsRepository, StaffingAnalyticsRepository>();
            services.AddScoped<IPipelinePollingRepository, PipelinePollingRepository>();
            services.AddScoped<IIrisPollingRepository, IrisPollingRepository>();

            #endregion

            #region Http Client

            services.AddTransient<HttpClientAuthorizationDelegatingHandler>();
            services.AddHttpContextAccessor();

            services.AddHttpClient<IResourceApiClient, ResourceApiClient>();

            services.AddHttpClient<ICcmApiClient, CcmApiClient>()
                .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();

            services.AddHttpClient<IRevenueApiClient, RevenueApiClient>();

            services.AddHttpClient<IAuthenticationApiClient, AuthenticationApiClient>();

            services.AddHttpClient<IWorkdayRedisConnectorAPIClient, WorkdayRedisConnectorAPIClient>();

            services.AddHttpClient<IStaffingApiClient, StaffingApiClient>()
                .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();

            services.AddHttpClient<IStaffingAnalyticsApiClient, StaffingAnalyticsApiClient>()
               .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();

            services.AddHttpClient<IHttpAggregatorClient, HttpAggregatorClient>()
               .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();
            
            services.AddHttpClient<IVacationApiClient, VacationApiClient>()
                .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();
            
            services.AddHttpClient<IBvuApiClient, BvuApiClient>()
                .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();

            services.AddHttpClient<IPipelineApiClient, PipelineApiClient>()
                .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();

            services.AddHttpClient<IPolarisApiClient, PolarisApiClient>();
               //.AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();

            services.AddHttpClient<IBasisApiClient, BasisApiClient>()
                .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();

            services.AddHttpClient<ISharepointApiClient, SharepointApiClient>()
                .AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();

            services.AddHttpClient<IIrisApiClient, IrisApiClient>();
                //.AddHttpMessageHandler<HttpClientAuthorizationDelegatingHandler>();


            #endregion


            return services;
        }
    }
}