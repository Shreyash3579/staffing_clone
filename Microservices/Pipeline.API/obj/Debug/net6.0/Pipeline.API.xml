<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pipeline.API</name>
    </assembly>
    <members>
        <member name="M:Pipeline.API.Controllers.LookupController.GetOpportunityStatusTypeList">
            <summary>
            Get Opporunity Status Types from Pipeline
            </summary>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOpportunitiesByOfficesActiveInDateRange(System.DateTime,System.DateTime,System.String,System.String,System.String)">
            <summary>
                Get opportunities for one or more offices active in specified date range
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="officeCodes"></param>
            <param name="opportunityStatusTypeCodes"></param>
            <param name="clientCodes"></param>
            <returns>Opportunities active within the selected date range</returns>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOpportunitiesByPipelineIds(System.Object)">
            <summary>
            TODO: Right now using the taxonomy Sp. Create a sperate SP and service method   
            Get basic opportunity data like opportunity name, client name 
            </summary>
            <param name="payload"></param>
            <remarks>
            Sample Request Metadata:
            {
            "pipelineIds:"",
            "officeCodes":"",
            "opportunityStatusTypeCodes": ""
            }
            </remarks>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOpportunitiesWithTaxonomiesByPipelineIds(System.String)">
            <summary>
                Get basic opportunity data like opportunity name, client name along with taxonomy data like primary industry and capability names
            </summary>
            <param name="pipelineIdList"></param>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOpportunityDetailsByPipelineId(System.Guid)">
            <summary>
                Get opportunity by pipeline ID
            </summary>
            <param name="pipelineId"></param>
            <returns>OpportunityDetails details and resources allocated on it</returns>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOpportunityDetailsByPipelineIds(System.String)">
            <summary>
                Get opportunity by pipeline ID
            </summary>
            <param name="pipelineIds"></param>
            <returns>OpportunityDetails details and resources allocated on it</returns>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOpportunitiesForTypeahead(System.String)">
            <summary>
                Get opportunities for typeahead
            </summary>
            <param name="searchString">Search opportunities by its name, client Code or Client Name</param>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOpportunityMasterChangesSinceLastPolled(System.Nullable{System.DateTime})">
            <summary>
            Gets all the records from opportunity_master that have been updated in pipeline after a specific datetime
            </summary>
            <param name="lastPolledDateTime">Do not pass anything to get the records with last updated >= yesterday </param>
            <returns></returns>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOpportunitiesFlatData(System.Nullable{System.DateTime})">
            <summary>
            Gets all the records from opportunity_master and related tables for analyticss
            </summary>
            <param name="lastUpdated">[Optional] Do not pass anything to get the all records, If passed, gets opps updated after that time</param>
            <returns></returns>
        </member>
        <member name="M:Pipeline.API.Controllers.OpportunityController.GetOppDataFromCortex(System.String)">
            <summary>
            Gets opportunity by cortex Id
            </summary>
            <param name="cortexOpportunityId"></param>
            <returns></returns>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Insert(`0,System.String)">
            <summary>
                Generic insert
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Insert(`0,System.String,System.Object)">
            <summary>
                Generic insert with dynamic parameters
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Insert(System.Object,System.String)">
            <summary>
                Generic insert with dynamic parameters
            </summary>
            <returns>A list of the inserted objects</returns>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Insert(System.String,System.Object)">
            <summary>
                Generic insert with dynamic parameters which does not return data
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.InsertAsync(System.String,System.Object)">
            <summary>
                Async insert with dynamic parameters which does not return data
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.InsertAsync(System.Object,System.String)">
            <summary>
                Async insert with dynamic parameters which return inserted object
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Insert(System.Data.IDbConnection,`0,System.String,System.Data.IDbTransaction)">
            <summary>
                Generic insert in a scope of a transaction
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Insert(System.Data.IDbConnection,`0,System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
                Generic insert with dynamic parameters in the scope of a transaction
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Update(`0,System.String)">
            <summary>
                Generic update
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Update(System.Data.IDbConnection,`0,System.String,System.Data.IDbTransaction)">
            <summary>
                Generic update in the scope of a transaction
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Update(`0,System.String,System.Object)">
            <summary>
                Generic update with dynamic parameters
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Update(System.Object,System.String)">
            <summary>
                Generic update with dynamic parameters
            </summary>
            <returns>A list of the updated objects</returns>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Update(System.Data.IDbConnection,`0,System.String,System.Object,System.Data.IDbTransaction)">
            <summary>
                Generic update with dynamic parameters in the scope of a transaction
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Update(System.String,System.Object)">
            <summary>
                Generic Update with dynamic parameters which does not return data
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.UpdateAsync(System.String,System.Object)">
            <summary>
                Async Update with dynamic parameters which does not return data
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.UpdateAsync(System.Object,System.String)">
            <summary>
                Async update with dynamic parameters which return updated object
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Delete(`0,System.String)">
            <summary>
                Generic delete
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Delete(System.Data.IDbConnection,`0,System.String,System.Data.IDbTransaction)">
            <summary>
                Generic delete in the scope of a transaction
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Delete(System.Guid,System.String)">
            <summary>
                Generic delete with uniqueidentifier as the id
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Delete(System.String,System.Object)">
            <summary>
                Generic delete with dynamic parameters
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.DeleteAsync(System.String,System.Object)">
            <summary>
                Async Delete with dynamic parameters which does not return data
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Delete(System.Object,System.String)">
            <summary>
                Generic delete with dynamic parameters
            </summary>
            <returns>A list of the deleted objects</returns>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Delete(System.Data.IDbConnection,System.Guid,System.String,System.Data.IDbTransaction)">
            <summary>
                Generic delete with uniqueidentifier as the id, in the scope of a transaction
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.Delete(System.Data.IDbConnection,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
                Generic delete with dynamic parameters in the scope of a transaction
            </summary>
        </member>
        <member name="M:Pipeline.API.Core.Repository.BaseRepository`1.DeleteAsync(System.Object,System.String)">
            <summary>
                Async Delete with dynamic parameters which return deleted object
            </summary>
        </member>
    </members>
</doc>
